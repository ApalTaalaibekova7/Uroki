// Задача 1. Разработайте функцию, которая принимает целое число в качестве аргумента и возвращает строку, содержащую это число и слово "компьютер" в нужном склонении по падежам в зависимости от числа. Например, при вводе числа 25 функция должна возвращать "25 компьютеров", для числа 41 — "41 компьютер", а для числа 1048 — "1048 компьютеров".
    function getComputerDeclension(n) {
        // Получаем последнюю цифру числа и две последние цифры
        const lastDigit = n % 10;
        const lastTwoDigits = n % 100;

    // Определяем склонение
    let word;
    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
        word = "компьютеров";
    } else if (lastDigit === 1) {
        word = "компьютер";
    } else if (lastDigit >= 2 && lastDigit <= 4) {
        word = "компьютера";
    } else {
        word = "компьютеров";
    }

    return `${n} ${word}`;
}
// Примеры использования
console.log(getComputerDeclension(25));  // "25 компьютеров"
console.log(getComputerDeclension(41));  // "41 компьютер"
console.log(getComputerDeclension(1048)); // "1048 компьютеров"
console.log(getComputerDeclension(112)); // "112 компьютеров"
// Объяснение логики
// Числа от 11 до 19 всегда используют форму "компьютеров".
// Для остальных чисел:
// Если последняя цифра 1, используется форма "компьютер".
// Если последняя цифра 2, 3 или 4, используется форма "компьютера".
// Для всех остальных — "компьютеров".
// Эта реализация покрывает все случаи и позволяет корректно склонять слово "компьютер".

//////////////////////////////////////////////////////////////////////

//     Задача 2.  Написать функцию/метод, которая на вход получает массив положительных целых чисел произвольной длины. 
// Например [42, 12, 18]. На выходе возвращает массив чисел, которые являются общими делителями для всех указанных числе. В примере это будет [2, 3, 6].

function findCommonDivisors(numbers) {
    // Функция для нахождения всех делителей числа
    const getDivisors = (num) => {
        const divisors = [];
        for (let i = 1; i <= Math.sqrt(num); i++) {
            if (num % i === 0) {
                divisors.push(i);
                if (i !== num / i) {
                    divisors.push(num / i);
                }
            }
        }
        return divisors.sort((a, b) => a - b);
    };

    // Функция для нахождения наибольшего общего делителя (НОД)
    const gcd = (a, b) => (b === 0 ? a : gcd(b, a % b));

    // Находим НОД для всех чисел в массиве
    const overallGCD = numbers.reduce((acc, num) => gcd(acc, num));

    // Возвращаем все делители НОД
    return getDivisors(overallGCD);
}

// Пример использования
const numbers = [42, 12, 18];
const result = findCommonDivisors(numbers);
console.log(result); // [1, 2, 3, 6]

// Объяснение:
// Функция getDivisors:

// Определяет все делители числа, включая само число.
// Проверяем делимость от 1 до квадратного корня числа для оптимизации.
// Функция gcd:

// Используем алгоритм Евклида для нахождения наибольшего общего делителя.
// Находим общий делитель:

// Используем reduce для нахождения НОД всех чисел в массиве.
// Результат:

// Возвращаем все делители общего НОД, так как они являются общими делителями для всех чисел.

///////////////////////////////////////////////////////////////////////

 // Задача 3.
//  Задача 3. Написать функцию/метод, которая возвращает массив простых чисел в диапазоне (2 числа - минимальное и максимальное) заданных чисел.
// Например, на вход переданы 2 числа: от 11 до 20  (диапазон считается включая граничные значения). 

// function findPrimesInRange(min, max) {
//     // Проверка, является ли число простым
//     const isPrime = (num) => {
//         if (num < 2) return false;
//         for (let i = 2; i <= Math.sqrt(num); i++) {
//             if (num % i === 0) return false;
//         }
//         return true;
//     };

//     // Итерация по диапазону и фильтрация простых чисел
//     const primes = [];
//     for (let i = Math.min(min, max); i <= Math.max(min, max); i++) {
//         if (isPrime(i)) {
//             primes.push(i);
//         }
//     }

//     return primes;
// }

// // Пример использования
// const min = 11;
// const max = 20;
// const result = findPrimesInRange(min, max);
// console.log(result); // [11, 13, 17, 19]

// Объяснение:
// Функция isPrime:

// Проверяет, является ли число простым:
// Если меньше 2 — не простое.
// Проверяем делимость числа от 2 до квадратного корня числа. Если делится без остатка, оно не простое.
// Итерация по диапазону:

// Используем Math.min и Math.max для корректного диапазона, если числа переданы в обратном порядке.
// Проверяем каждое число из диапазона на простоту и добавляем его в массив primes, если оно простое.
// Возвращаем результат:

// Массив содержит все простые числа из заданного диапазона, включая граничные значения.
// Пример:
// Для диапазона от 11 до 20 результатом будут числа [11, 13, 17, 19], так как это единственные простые числа в этом диапазоне.

/////////////////////////////////////////////////////////////////////

// Задача 4. Написать метод, который в консоль выводит таблицу умножения. На вход метод получает число, до которого выводит таблицу умножения. В консоли должна появиться таблица. Например, если на вход пришло число 5, то получим:
function printMultiplicationTable(n) {
    // Заголовок таблицы
    let header = '   ';
    for (let i = 1; i <= n; i++) {
        header += `${i.toString().padStart(4, ' ')}`;
    }
    console.log(header);

    // Линия-разделитель
    console.log('-'.repeat(4 * (n + 1)));

    // Основная часть таблицы
    for (let i = 1; i <= n; i++) {
        let row = `${i.toString().padStart(2, ' ')} |`; // Номер строки
        for (let j = 1; j <= n; j++) {
            row += `${(i * j).toString().padStart(4, ' ')}`; // Результат умножения
        }
        console.log(row);
    }
}

// Пример использования
const number = 5;
printMultiplicationTable(number);
// Объяснение:
// Формирование заголовка:

// Создаём первую строку с числами от 1 до n.
// Разделитель:

// Добавляем горизонтальную черту для разделения заголовка и основной таблицы.
// Вывод строк таблицы:

// Каждая строка начинается с номера строки, за которым следуют произведения чисел от 1 до n.
// Используем padStart для выравнивания колонок.
// Динамичность:

// Код работает для любого числа n, переданного в функцию.
